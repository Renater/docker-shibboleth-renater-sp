Listen 443

ShibConfig /etc/shibboleth/shibboleth2.xml

ServerName ${RENATER_SP_HTTPD_SERVER_NAME}
ServerAdmin ${RENATER_SP_ADMIN_MAIL}

<VirtualHost *:443>
  UseCanonicalName On
  ProxyPreserveHost On

  LogLevel  ${RENATER_SP_HTTPD_LOG_LEVEL}
  ErrorLog  /var/log/apache2/error.log
  CustomLog /var/log/apache2/access.log combined

  # use a self-signed certificate for apache2 cause this reverse proxy
  # will be behind another one with a correct SSL certificate
  SSLEngine on
  SSLProtocol all
  SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem
  SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key


  # thanks to this section, metadata of the service provider are published
  # https://${RENATER_SP_HTTPD_SERVER_NAME}/Shibboleth.sso/Metadata
  <Location /Shibboleth.sso/>
    AuthType shibboleth
    ShibRequestSetting requireSession 0
    Require shibboleth
  </Location>
  # this section is used for shibb errors templates.
  <Location /shibboleth-sp>
    Satisfy Any
    Allow from all
  </Location>
  Alias /shibboleth-sp/main.css /usr/share/shibboleth/main.css


  # Here goes your public routes (ADAPT IT!)
  # for this demo, just proxy the google website !
  <Location />
    ProxyPass        ${RENATER_SP_HTTPD_PUBLIC_PROXY_TO} status= retry=5
    ProxyPassReverse ${RENATER_SP_HTTPD_PUBLIC_PROXY_TO}
  </Location>


  # Here goes your protected routes (ADAPT IT!)
  # for this demo this is a full protected URL folder hierarchy
  # and once the user is logged, it can then access the second proxified website
  # for this example it is https://abes.fr
  <Location ${RENATER_SP_HTTPD_PROTECTED_PATH}>
    AuthType shibboleth
    ShibRequestSetting requireSession 1
    ShibUseHeaders On
    ShibRequireSession On
    Require shib-session

    ProxyPass        ${RENATER_SP_HTTPD_PROTECTED_PROXY_TO} status= retry=5
    ProxyPassReverse ${RENATER_SP_HTTPD_PROTECTED_PROXY_TO}
  </Location>


</VirtualHost>
